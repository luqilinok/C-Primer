#ifndef EX12_27_H
#define EX12_27_H


#include<iostream>
#include<vector>
#include<sstream>
#include<string>
#include<memory>
#include<set>
#include<map>
#include<algorithm>

using namespace std;

class QueryResult;

class TextQuery
{
public:
	friend class QueryResult;
	using line_no = vector<string>::size_type;
	TextQuery(ifstream &);
	QueryResult query(const string&) const;

private:
	shared_ptr<vector<string>> file;
	map<string, shared_ptr<set<line_no>>> wm;
};

TextQuery::TextQuery(ifstream &is) :file(new vector<string>)
{
	string text;
	while (getline(is,text))
	{
		file->push_back(text);
		int n = file->size() - 1;
		istringstream line(text);
		string word;
		while (line>>word)
		{
			auto &lines = wm[word];
			if (!lines)
			{
				lines.reset(new set<line_no>);
			}
			lines->insert(n);
		}
	}
}
class QueryResult
{
	friend ostream& print(ostream&, const QueryResult&);
public:
	QueryResult(string s,shared_ptr<set<TextQuery::line_no>> p,shared_ptr<vector<string>> f):word(s),lines(p),file(f){ }

private:
	string word;
	shared_ptr<set<TextQuery::line_no>> lines;
	shared_ptr<vector<string>> file;
};

ostream print(ostream &, const QueryResult&);
#endif // !EX12_27_H
